--------------------------------------------Dridex and API hashing-------------------------------------------------------
Dridex Is a banking trojan that first appeared in 2014, and has used API hashing since it's first appearence,
I'll start by giving an example of API hashing, then reverse engineer an old and new sample of Dridex,
so we can observe how Dridex has changed it's API hashing techniques over the years. 
Dridex has been used in campaigns in over 40 countries so im not that concerened with the associated groups. Mainly the techniques employed.
-------------------------------------------------------------------------------------------------------------------------

A simple example of API hashing in C
--------------------------------------------------
#include <stdio.h>
#include <string.h>
// this is really not effective and causes hash collisions very easily, just learning for malware
// building a resolver function next

char api[] = "CreateThread"; // api name to hash


void hash_from_string()
{
    int len = strlen(api);
    unsigned int hash = 0x35; // random byte


    for (int i = 0; i < len; i++) {
        hash += (hash * 0xab10f29f + api[i]) & 0xffffff; //0xab10f29f = another random value, 0xffffff = masking
    }
    printf("%s: 0x00%x\n", api, hash);
}

int main()
{
    hash_from_string();


}
---------------------------------------------------------

Old Dridex:  f9495e968f9a1610c0cf9383053e5b5696ecc85ca3ca2a338c24c7204cc93881 

---------------------------------------------------------










