from elftools.elf.elffile import ELFFile

def patch_ud2(file_path):
    with open(file_path, 'rb') as f:
        elf_file = ELFFile(f)

        # Find the address and size of the main function
        main_address = None
        main_size = None
        for section in elf_file.iter_sections():
            if section.header.sh_type == 'SHT_SYMTAB':
                for symbol in section.iter_symbols():
                    if symbol.name == 'main':
                        main_address = symbol['st_value']
                        main_size = symbol['st_size']
                        break
            if main_address is not None:
                break

        # Iterate over all bytes in the main function
        if main_address is not None and main_size > 0:
            f.seek(main_address)
            main_bytes = f.read(main_size)
            for offset, byte in enumerate(main_bytes):
                # Check if the current byte is a UD2 instruction
                if byte == 0x0f and main_bytes[offset+1] == 0x0b:
                    # Replace the UD2 instruction with a NOP instruction (0x90)
                    f.seek(main_address + offset)
                    f.write(b'\x90\x90')

if __name__ == '__main__':
    patch_ud2('path/to/ELF')
